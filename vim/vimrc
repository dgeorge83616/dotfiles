" Dan George

"{{{Auto Commands
autocmd BufNewFile,BufRead *.py set ft=python
" This seemed slick, but I'm making too many changes and it is annoying
"autocmd BufWritePost $MYVIMRC ++nested source $MYVIMRC
" Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
" Open git commit message in insert mode
autocmd BufRead COMMIT_EDITMSG {
  setl spell
  start
  }

source ~/.vim/bundle/vim-nix/ftdetect/nix.vim

"{{{LSP
"{{{asyncomplete
" Use ALE's function for asyncomplete defaults
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
    \ 'priority': 10,
    \ }))

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> <f2> <plug>(lsp-rename)
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
"}}}

" Register ccls C++ lanuage server.
if executable('ccls')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'ccls',
      \ 'cmd': {server_info->['ccls']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
      \ 'initialization_options': {'cache': {'directory': expand('~/.cache/ccls') }},
      \ 'allowlist': ['c', 'cpp'],
      \ })
endif
"}}}

" Define a notes type for model notes
" This doesn't work and I don't know why
"autocmd BufNewFile,BufRead *-notes.txt setf notes
"augroup Notes
  "au!
  "autocmd FileType notes setl nonumber
  "autocmd FileType notes setl norelativenumber
  "autocmd FileType notes setl textwidth=80
  "autocmd FileType notes setl wrapmargin=8
"augroup END
"{{{Source files
augroup Source
  au!
"{{{Define templates
" Need to change these so that alternate buf isn't the template file
  autocmd BufNewFile *.sh 0r ~/.vim/templates/bash.tpl | normal G
  " Too often accidentally open a new source file by typo
  "autocmd BufNewFile *.c,*.h,*.cc,*.cpp,*.hpp 0r ~/.vim/templates/C_copyright.tpl | normal G
"}}}
"{{{Base
  autocmd FileType c,cpp,python setl nu
  autocmd FileType c,cpp,python setl rnu
  autocmd FileType c,cpp,python setl colorcolumn=100
  autocmd FileType c,cpp setl foldmethod=syntax
  autocmd FileType python setl foldmethod=indent
  autocmd FileType cmake,make,sh setl nu
  autocmd FileType cmake,make,sh setl rnu
  autocmd FileType cmake,make,sh setl colorcolumn=80
"}}}
augroup SourceTabs
  " Need to be able to overide these in project .vimrc files
  au!
"{{{C, C++, and Python
  " Is it worth forcing .h to be c, instead of possibly c++?
  "autocmd BufNewFile,BufRead *.h set ft=c
  autocmd FileType c,cpp setl expandtab
  autocmd FileType c,cpp setl tabstop=4
  autocmd FileType c,cpp setl shiftwidth=4
  autocmd FileType c,cpp setl softtabstop=4
  autocmd FileType python setl expandtab
  autocmd FileType python setl tabstop=4
  autocmd FileType python setl shiftwidth=4
  autocmd FileType python setl softtabstop=4
"}}}
"{{{Build files and shell scripts
  autocmd FileType make       setlocal noexpandtab   shiftwidth=8   softtabstop=8   tabstop=8
  autocmd FileType cmake,sh   setlocal   expandtab   shiftwidth=4   softtabstop=4   tabstop=4
"}}}
"{{{YAML files
  autocmd FileType yaml   setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
"}}}
augroup END
"}}}
"{{{Restore cursor position to where it was before
augroup JumpCursorOnEdit
au!
autocmd BufReadPost *
\ if expand("<afile>:p:h") !=? $TEMP |
\ if line("'\"") > 1 && line("'\"") <= line("$") |
\ let JumpCursorOnEdit_foo = line("'\"") |
\ let b:doopenfold = 1 |
\ if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
\ let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
\ let b:doopenfold = 2 |
\ endif |
\ exe JumpCursorOnEdit_foo |
\ endif |
\ endif
" Need to postpone using "zv" until after reading the modelines.
autocmd BufWinEnter *
\ if exists("b:doopenfold") |
\ exe "normal zv" |
\ if(b:doopenfold > 1) |
\ exe "+".1 |
\ endif |
\ unlet b:doopenfold |
\ endif
augroup END"}}}
"}}}
"{{{Misc Settings
set makeprg=ninja
set nocompatible " necesary for lots of cool vim things
set undofile
set ruler
set number
set rnu
set ignorecase
set smartcase
set autoindent          " on new lines, match indent of previous line
set copyindent          " copy the previous indentation on autoindenting
set cindent             " smart indenting for c-like code
set cinoptions=l1,b1,g0,E-s,N-s,t0,(0,W4  " see :h cinoptions-values
set cinkeys+=0=break
set noexpandtab
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set bs=indent,eol,start " Allow backspacing over everything in insert mode
set nobackup            " no backup~ files.
set autoread
set lazyredraw
let g:is_posix = 1
set tags=./tags;/
set noerrorbells visualbell t_vb=
set exrc

" gdb inside vim
let g:termdebug_popup = 0
let g:termdebug_wide = 163

set showcmd " shows what you are typing as a command

syntax enable " needed for Syntax Highlighting and stuff

filetype on
filetype plugin on
set grepprg=grep\ -nH\ $*

" Use english for spellchecking, but don't spellcheck by default
if version >= 700
set spl=en spell
set nospell
endif

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" Enable mouse support in console
set mouse+=a

" Let me do things with the mouse inside tmux
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

" Got backspace?
set backspace=2

" Incremental searching is sexy
set incsearch

" Highlight things that we find with the search
set hlsearch
" easily get rid of the highlight, until next search
noremap ./ :nohl<CR>

" Highlight the cursor line
set cursorline

" Help balance brackets
set showmatch

" When I close a tab, remove the buffer from the buffer list
set nohidden

" Set off the other paren
highlight MatchParen ctermbg=4

filetype plugin indent on
filetype indent on
syntax on

"Open new split panes to right and bottom, which feels more natural than
"Vimâ€™s default:
set splitbelow
set splitright
" }}}
"{{{ Functions
"{{{ Open URL in browser

function! Browser ()
let line = getline (".")
let line = matchstr (line, "http[^ ]*")
exec "!firefox ".line
endfunction

"}}}
"{{{Theme Rotating
let themeindex=0
function! RotateColorTheme()
let y = -1
while y == -1
let colorstring = "inkpot#ron#blue#elflord#evening#koehler#murphy#pablo#desert#torte#"
let x = match( colorstring, "#", g:themeindex )
let y = match( colorstring, "#", x + 1 )
let g:themeindex = x + 1
if y == -1
let g:themeindex = 0
else
let themestring = strpart(colorstring, x + 1, y - x - 1)
return ":colorscheme ".themestring
endif
endwhile
endfunction
" }}}
"{{{ Paste Toggle
let paste_mode = 0 " 0 = normal, 1 = paste

func! Paste_on_off()
if g:paste_mode == 0
set paste
let g:paste_mode = 1
else
set nopaste
let g:paste_mode = 0
endif
return
endfunc
"}}}
"}}}
"{{{ Mappings

let mapleader=" "

" Open Url on this line with the browser \w
map <Leader>w :call Browser ()<CR>

" Open the Project Plugin <F2>
nnoremap <silent> <F2> :Project<CR>

" Open the Project Plugin
nnoremap <silent> <Leader>pal :Project .vimproject<CR>

" TODO Mode
nnoremap <silent> <Leader>todo :execute TodoListMode()<CR>

" Open the TagList Plugin <F3>
nnoremap <silent> <F3> :Tlist<CR>

" Next Tab
nnoremap <silent> <C-Right> :tabnext<CR>

" Previous Tab
nnoremap <silent> <C-Left> :tabprevious<CR>

" New Tab
nnoremap <silent> <C-t> :tabnew<CR>

" Rotate Color Scheme <F8>
" nnoremap <silent> <F8> :execute RotateColorTheme()<CR>

" DOS is for fools.
nnoremap <silent> <F9> :%s/$//g<CR>:%s// /g<CR>

" Paste Mode! Dang! <F8>
nnoremap <silent> <F8> :call Paste_on_off()<CR>
set pastetoggle=<F8>

" Edit vimrc \ev
nnoremap <silent> <Leader>ev :tabnew<CR>:e $MYVIMRC<CR>

" Edit gvimrc \gv
nnoremap <silent> <Leader>gv :tabnew<CR>:e ~/.gvimrc<CR>

" Source vimrc
noremap <Leader>sv :source $MYVIMRC<CR>

" Edit bashrc
noremap <Leader>eb :tabnew<CR>:e ~/.bashrc<CR>

" Up and down are more logical with g..
nnoremap <silent> k gk
nnoremap <silent> j gj
inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja

" Good call Benjie (r for i)
nnoremap <silent> <Home> i <Esc>r
nnoremap <silent> <End> a <Esc>r

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Space will toggle folds!
nnoremap <space> za

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
"map N Nzz
"map n nzz

" Testing
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<c-g>u\<cr>"
inoremap <expr> <c-n> pumvisible() ? "\<lt>c-n>" : "\<lt>c-n>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"
inoremap <expr> <m-;> pumvisible() ? "\<lt>c-n>" : "\<lt>c-x>\<lt>c-o>\<lt>c-n>\<lt>c-p>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"

" Fix email paragraphs
nnoremap <leader>par :%s/^>$//<CR>

"}}}
"{{{Plugins
runtime! ftplugin/man.vim

"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
"
" " The following are examples of different formats supported.
" " Keep Plugin commands between vundle#begin/end.
" " plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'

Plugin 'LnL7/vim-nix'

Plugin 'lifepillar/vim-solarized8'

" version control gutter (works with git)
Plugin 'airblade/vim-gitgutter'

" Seamlessly navigate between tmux and vim panes
Plugin 'christoomey/vim-tmux-navigator'

" Python Linter
Plugin 'nvie/vim-flake8'

" status bar that rocks
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'dense-analysis/ale'

"{{{Asyncomplete
" This set of plugins looks powerful but not enough documentation
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/vim-lsp'
"Plugin 'mattn/vim-lsp-settings'
"Plugin 'prabirshrestha/asyncomplete-lsp.vim'
Plugin 'rhysd/vim-lsp-ale'
"}}}

Plugin 'editorconfig/editorconfig-vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'kien/rainbow_parentheses.vim'


Plugin 'rhysd/vim-clang-format'
Plugin 'rhysd/vim-healthcheck'

Plugin 'tom-doerr/vim_codex'

call vundle#end() " required
"}}}
"{{{Color
function! Solarized8Overrides() abort
        " Unable to make this work correctly with AirlineTheme solarize
        "highlight airline_b     ctermbg=11  ctermfg=8
endfunction
augroup ColorOverrides
        autocmd!
        autocmd ColorScheme solarized8_high call Solarized8Overrides()
augroup END
" Suggested remedy for wrong colors inside tmux
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark
colorscheme solarized8_high
"}}}
"{{{Airline
" solarized8_high uses fg/bg combos that have bad contrast, for me
let g:airline_theme = 'sol'
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#error_symbol = 'E:'
let g:airline#extensions#ale#warning_symbol = 'W:'
"}}}
"{{{Fugitive
" Fugitive Conflict Resolution
nnoremap <leader>gd :Gvdiffsplit!<CR>
" "diff obtain [local|upstream]"
" local will have //3 in its name
nnoremap dol :diffget //2<CR>
" upstream will have //3 in its name
nnoremap dou :diffget //3<CR>
"}}}
"{{{Syntastic
" Let ale do it, for now

" Don't use recommended statusline with airline
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:airline#extensions#syntastic#enabled = 1
"let airline#extensions#syntastic#error_symbol = 'E:'
"let airline#extensions#syntastic#stl_format_err = '%E{[%fe(#%e)]}'
"let airline#extensions#syntastic#warning_symbol = 'W:'
"let airline#extensions#syntastic#stl_format_warn = '%W{[%fw(#%w)]}'

let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
let g:syntastic_cmake_checkers = ['cmakelint']
let g:syntastic_cpp_checkers = ['g++']
let g:syntastic_c_checkers = ['gcc']
let g:syntastic_cpp_check_header = 1
let g:syntastic_c_config_file = '.syntastic_c'
let g:syntastic_cpp_config_file = '.syntastic_cpp'
let g:syntastic_mode_map = {
  \'mode': 'active',
  \'active_filetypes': ['sh'],
  \'passive_filetypes': ['c', 'cpp', 'cmake', 'python']
 \}
"}}}
"{{{Cscope
if has("cscope")
        set csprg=/usr/bin/cscope
        set csto=0
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
                cs add cscope.out
                " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
                cs add $CSCOPE_DB
        endif
        set csverb
	nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>a :cs find a <C-R>=expand("<cword>")<CR><CR>

	" Using 'CTRL-spacebar' then a search type makes the vim window
	" split horizontally, with search result displayed in
	" the new window.

	nmap <C-Space>s :scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>g :scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>c :scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>t :scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>e :scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-Space>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-Space>d :scs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>a :scs find a <C-R>=expand("<cword>")<CR><CR>

	" Hitting CTRL-space *twice* before the search type does a vertical
	" split instead of a horizontal one

	nmap <C-Space><C-Space>s
		\:vert scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>g
		\:vert scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>c
		\:vert scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>t
		\:vert scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>e
		\:vert scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>i
		\:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-Space><C-Space>d
		\:vert scs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>a
		\:vert scs find a <C-R>=expand("<cword>")<CR><CR>
endif
"}}}
"{{{Asyncomplete
let g:aynscomplete_log_file = './.asyncomplete'
"}}}Asyncomplete
"{{{Ale
let g:ale_c_clangformat_use_local = 1
let g:ale_completion_enabled = 0
let g:ale_set_balloons = 1
let g:ale_set_loclist = 1
let s:c_linters_ignore = [ 'clangd', 'clang++', 'cppcheck', 'cquery', 'clazy', 'flawfinder' ]
let g:ale_linters_ignore = {
      \'cpp': s:c_linters_ignore,
      \'c'  : s:c_linters_ignore
\}
unlet s:c_linters_ignore
let g:ale_fixers = {
      \'*': ['remove_trailing_lines', 'trim_whitespace'],
      \'c': [ 'clang-format', 'clangtidy'],
      \'cpp': [ 'clang-format', 'clangtidy'],
      \'python': ['add_blank_lines_for_python_control_statements', 'autoimport', 'autopep8', 'black', 'isort', 'reorder-python-imports'],
      \'yaml': ['remove_trailing_lines', 'trim_whitespace', 'yamlfix'],
\}
let g:airline#extensions#ale#enable = 1
let g:ale_cmake_cmakelint_options = '--config=.cmakelintrc'
"{{{cppcheck
"yoy can create a misra.json file that lists references licensed messages file to get
"descriptive error messages
let s:cppcheck_options = ''
if filereadable('misra.json')
  let s:cppcheck_options .= ' --addon=misra.json'
elseif filereadable('misra.py')
  let s:cppcheck_options .= ' --addon=misra.py'
endif
let g:ale_c_cppcheck_options = s:cppcheck_options
let g:ale_cpp_cppcheck_options = s:cppcheck_options
unlet s:cppcheck_options
"}}}cppcheck

"Cspell uses cpp dictionary for both C/C++
let g:ale_cspell_options = '--language-id cpp'

"set completeopt=menu,menuone,preview,noselect,noinsert
"set completeopt=menu,menuone,popup,noselect,noinsert
set completeopt=longest,menuone,popup
"set omnifunc=ale#completion#OmniFunc
function! SmartInsertCompletion() abort
  " Use the default CTRL-N in completion menus
  if pumvisible()
    return "\<C-n>"
  endif

  " Exit and re-enter insert mode, and use insert completion
  return "\<C-c>a\<C-n>"
endfunction

inoremap <silent> <C-n> <C-R>=SmartInsertCompletion()<CR>
"}}}Ale
set modelines=1
" vim:foldmethod=marker:foldlevel=0:tw=0:ts=2:sw=2:sts=2:et:
