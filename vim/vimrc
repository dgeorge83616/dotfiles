" Dan George
"{{{Auto Commands
" call flake8 for python files
autocmd BufNewFile,BufRead *.py set ft=python
" This seemed slick, but I'm making too many changes and it is annoying
"autocmd BufWritePost $MYVIMRC ++nested source $MYVIMRC
autocmd BufWritePost *.py call Flake8()
" Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
"{{{Source files
augroup Source
  au!
"{{{C, C++, and Python
  autocmd FileType c,cpp,python setl nu
  autocmd FileType c,cpp,python setl rnu
  autocmd FileType c,cpp,python setl colorcolumn=100
  autocmd FileType c,cpp setl expandtab
  autocmd FileType c,cpp setl tabstop=4
  autocmd FileType c,cpp setl shiftwidth=4
  autocmd FileType c,cpp setl softtabstop=4
  autocmd FileType c,cpp setl foldmethod=syntax
  autocmd FileType python setl foldmethod=indent
  autocmd FileType python setl expandtab
  autocmd FileType python setl tabstop=4
  autocmd FileType python setl shiftwidth=4
  autocmd FileType python setl softtabstop=4
"}}}
"{{{Build files
  autocmd FileType cmake,make setl nu
  autocmd FileType cmake,make setl rnu
  autocmd FileType cmake,make setl noexpandtab
  autocmd FileType cmake,make setl tabstop=4
  autocmd FileType cmake,make setl shiftwidth=4
  autocmd FileType cmake,make setl softtabstop=4
  autocmd FileType cmake,make setl colorcolumn=80
"}}}
augroup END
"}}}
"{{{Restore cursor position to where it was before
augroup JumpCursorOnEdit
au!
autocmd BufReadPost *
\ if expand("<afile>:p:h") !=? $TEMP |
\ if line("'\"") > 1 && line("'\"") <= line("$") |
\ let JumpCursorOnEdit_foo = line("'\"") |
\ let b:doopenfold = 1 |
\ if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
\ let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
\ let b:doopenfold = 2 |
\ endif |
\ exe JumpCursorOnEdit_foo |
\ endif |
\ endif
" Need to postpone using "zv" until after reading the modelines.
autocmd BufWinEnter *
\ if exists("b:doopenfold") |
\ exe "normal zv" |
\ if(b:doopenfold > 1) |
\ exe "+".1 |
\ endif |
\ unlet b:doopenfold |
\ endif
augroup END"}}}
"}}}
"{{{Misc Settings
set nocompatible " necesary for lots of cool vim things
set undofile
set ruler
set number
set rnu
set ignorecase
set smartcase
set autoindent          " on new lines, match indent of previous line
set copyindent          " copy the previous indentation on autoindenting
set cindent             " smart indenting for c-like code
set cinoptions=l1,b1,g0,E-s,N-s,t0,(0,W4  " see :h cinoptions-values
set cinkeys+=0=break
set noexpandtab
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set bs=indent,eol,start " Allow backspacing over everything in insert mode
set nobackup            " no backup~ files.
set autoread
set lazyredraw
let g:is_posix = 1
set tags=./tags;/
set noerrorbells visualbell t_vb=
set exrc

" gdb inside vim
let g:termdebug_popup = 0
let g:termdebug_wide = 163

set showcmd " shows what you are typing as a command

syntax enable " needed for Syntax Highlighting and stuff

filetype on
filetype plugin on
set grepprg=grep\ -nH\ $*

" Use english for spellchecking, but don't spellcheck by default
if version >= 700
set spl=en spell
set nospell
endif

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" Enable mouse support in console
set mouse+=a

" Let me do things with the mouse inside tmux
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

" Got backspace?
set backspace=2

" Incremental searching is sexy
set incsearch

" Highlight things that we find with the search
set hlsearch
" easily get rid of the highlight, until next search
noremap ./ :nohl<CR>

" Highlight the cursor line
set cursorline

" Help balance brackets
set showmatch

" When I close a tab, remove the buffer from the buffer list
set nohidden

" Set off the other paren
highlight MatchParen ctermbg=4

filetype plugin indent on
filetype indent on
syntax on

"Open new split panes to right and bottom, which feels more natural than
"Vimâ€™s default:
set splitbelow
set splitright
" }}}
"{{{ Functions
"{{{ Open URL in browser

function! Browser ()
let line = getline (".")
let line = matchstr (line, "http[^ ]*")
exec "!firefox ".line
endfunction

"}}}
"{{{Theme Rotating
let themeindex=0
function! RotateColorTheme()
let y = -1
while y == -1
let colorstring = "inkpot#ron#blue#elflord#evening#koehler#murphy#pablo#desert#torte#"
let x = match( colorstring, "#", g:themeindex )
let y = match( colorstring, "#", x + 1 )
let g:themeindex = x + 1
if y == -1
let g:themeindex = 0
else
let themestring = strpart(colorstring, x + 1, y - x - 1)
return ":colorscheme ".themestring
endif
endwhile
endfunction
" }}}
"{{{ Paste Toggle
let paste_mode = 0 " 0 = normal, 1 = paste

func! Paste_on_off()
if g:paste_mode == 0
set paste
let g:paste_mode = 1
else
set nopaste
let g:paste_mode = 0
endif
return
endfunc
"}}}
"{{{ Todo List Mode

function! TodoListMode()
e ~/.todo.otl
Calendar
wincmd l
set foldlevel=1
tabnew ~/.notes.txt
tabfirst
" or 'norm! zMzr'
endfunction

"}}}
"}}}
"{{{ Mappings

let mapleader=" "

" Open Url on this line with the browser \w
map <Leader>w :call Browser ()<CR>

" Open the Project Plugin <F2>
nnoremap <silent> <F2> :Project<CR>

" Open the Project Plugin
nnoremap <silent> <Leader>pal :Project .vimproject<CR>

" TODO Mode
nnoremap <silent> <Leader>todo :execute TodoListMode()<CR>

" Open the TagList Plugin <F3>
nnoremap <silent> <F3> :Tlist<CR>

" Next Tab
nnoremap <silent> <C-Right> :tabnext<CR>

" Previous Tab
nnoremap <silent> <C-Left> :tabprevious<CR>

" New Tab
nnoremap <silent> <C-t> :tabnew<CR>

" Rotate Color Scheme <F8>
" nnoremap <silent> <F8> :execute RotateColorTheme()<CR>

" DOS is for fools.
nnoremap <silent> <F9> :%s/$//g<CR>:%s// /g<CR>

" Paste Mode! Dang! <F8>
nnoremap <silent> <F8> :call Paste_on_off()<CR>
set pastetoggle=<F8>

" Edit vimrc \ev
nnoremap <silent> <Leader>ev :tabnew<CR>:e $MYVIMRC<CR>

" Edit gvimrc \gv
nnoremap <silent> <Leader>gv :tabnew<CR>:e ~/.gvimrc<CR>

" Source vimrc
noremap <Leader>sv :source $MYVIMRC<CR>

" Edit bashrc
noremap <Leader>eb :tabnew<CR>:e ~/.bashrc<CR>

" Up and down are more logical with g..
nnoremap <silent> k gk
nnoremap <silent> j gj
inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja

" Good call Benjie (r for i)
nnoremap <silent> <Home> i <Esc>r
nnoremap <silent> <End> a <Esc>r

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Space will toggle folds!
nnoremap <space> za

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
"map N Nzz
"map n nzz

" Testing
set completeopt=longest,menuone,preview

inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<c-g>u\<cr>"
inoremap <expr> <c-n> pumvisible() ? "\<lt>c-n>" : "\<lt>c-n>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"
inoremap <expr> <m-;> pumvisible() ? "\<lt>c-n>" : "\<lt>c-x>\<lt>c-o>\<lt>c-n>\<lt>c-p>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"

" Fix email paragraphs
nnoremap <leader>par :%s/^>$//<CR>

"}}}
"{{{Plugins
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
"
" " The following are examples of different formats supported.
" " Keep Plugin commands between vundle#begin/end.
" " plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

" version control gutter (works with git)
Plugin 'airblade/vim-gitgutter'

" Seamlessly navigate between tmux and vim panes
Plugin 'christoomey/vim-tmux-navigator'

" Python Linter
Plugin 'nvie/vim-flake8'
" Edit gpg encrypted files
Plugin 'jamessan/vim-gnupg'

" status bar that rocks
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'editorconfig/editorconfig-vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'dense-analysis/ale'
Plugin 'tpope/vim-surround'
Plugin 'kien/rainbow_parentheses.vim'

Plugin 'lifepillar/vim-solarized8'
call vundle#end() " required
"}}}
"{{{Color
function! Solarized8Overrides() abort
        " Unable to make this work correctly with AirlineTheme solarize
        "highlight airline_b     ctermbg=11  ctermfg=8
endfunction
augroup ColorOverrides
        autocmd!
        autocmd ColorScheme solarized8_high call Solarized8Overrides()
augroup END
" Suggested remedy for wrong colors inside tmux
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark
colorscheme solarized8_high
"}}}
"{{{Airline
" solarized8_high uses fg/bg combos that have bad contrast, for me
let g:airline_theme = 'sol'
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#error_symbol = 'E:'
let g:airline#extensions#ale#warning_symbol = 'W:'
"}}}
"{{{Fugitive
" Fugitive Conflict Resolution
nnoremap <leader>gd :Gvdiffsplit!<CR>
" "diff obtain [local|upstream]"
" local will have //3 in its name
nnoremap dol :diffget //2<CR>
" upstream will have //3 in its name
nnoremap dou :diffget //3<CR>
"}}}
"{{{Syntastic
" Let ale do it, for now

" Don't use recommended statusline with airline
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:airline#extensions#syntastic#enabled = 1
"let airline#extensions#syntastic#error_symbol = 'E:'
"let airline#extensions#syntastic#stl_format_err = '%E{[%fe(#%e)]}'
"let airline#extensions#syntastic#warning_symbol = 'W:'
"let airline#extensions#syntastic#stl_format_warn = '%W{[%fw(#%w)]}'

"let g:syntastic_always_populate_loc_list = 0
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_cpp_checkers = ['gcc']
"let g:syntastic_c_checkers = ['gcc']
"let g:syntastic_cpp_check_header = 1
"let g:syntastic_c_config_file = '.syntastic_c'
"let g:syntastic_cpp_config_file = '.syntastic_cpp'
let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": ['sh'],
        \ "passive_filetypes": ['cmake', 'python']}
"}}}
"{{{Ycm
" PX4 code doesn't play nice with clang and YCM can't use gcc
let g:ycm_show_diagnostics_ui = 1

" Fallback to extra conf if no compile DB
let g:ycm_extra_conf_globlist = ['~/projects/aidev/*']
", '~/projects/aipx4', '~/projects/px4*',
" GoTo mappings
" Declaration
" Definition
" References

" Get mappings
" GetParent
" GetDoc

" Refactor mappings
" FixIt
"}}}
"{{{Cscope
if has("cscope")
        set csprg=/usr/bin/cscope
        set csto=0
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
                cs add cscope.out
                " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
                cs add $CSCOPE_DB
        endif
        set csverb
	nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>a :cs find a <C-R>=expand("<cword>")<CR><CR>

	" Using 'CTRL-spacebar' then a search type makes the vim window
	" split horizontally, with search result displayed in
	" the new window.

	nmap <C-Space>s :scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>g :scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>c :scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>t :scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>e :scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-Space>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-Space>d :scs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>a :scs find a <C-R>=expand("<cword>")<CR><CR>

	" Hitting CTRL-space *twice* before the search type does a vertical
	" split instead of a horizontal one

	nmap <C-Space><C-Space>s
		\:vert scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>g
		\:vert scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>c
		\:vert scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>t
		\:vert scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>e
		\:vert scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>i
		\:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-Space><C-Space>d
		\:vert scs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>a
		\:vert scs find a <C-R>=expand("<cword>")<CR><CR>
endif
"}}}
"{{{Ale
let g:ale_set_loclist = 0
let g:ale_linters_ignore = ['ccls', 'cppcheck', 'cquery', 'flawfinder', 'clazy-standalone', 'clang++', 'clang', 'clangd']
let g:ale_fixers = {'cpp': ['astyle', 'clangtidy', 'remove_trailing_lines', 'trim_whitespace', 'uncrustify']}
let g:ale_c_astyle_project_options = 'project=.astylerc'
let g:ale_cpp_cpplint_options = '--filter=-build/include_subdir,-build/include_order,-whitespace/tab,-readability/cast,-whitespace/braces'
let g:airline#extensions#ale#enable = 1
let g:ale_cmake_cmakelint_options = '--config=.cmakelintrc'
"}}}
set modelines=1
" vim:foldmethod=marker:foldlevel=0:nowrap:ts=2:sw=2:sts=2:et:
